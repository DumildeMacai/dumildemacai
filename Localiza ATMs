"use client";
import React from "react";
import * as ReactGoogleMaps from "@/libraries/react-google-maps";
import { useUpload } from "../utilities/runtime-helpers";

const NEXT_PUBLIC_GOOGLE_MAPS_API_KEY =
  process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;

function MainComponent() {
  const [currentScreen, setCurrentScreen] = React.useState("splash");
  const [password, setPassword] = React.useState("");
  const [atms, setAtms] = React.useState([]);
  const [selectedAtm, setSelectedAtm] = React.useState(null);
  const [searchTerm, setSearchTerm] = React.useState("");
  const [showSuggestions, setShowSuggestions] = React.useState(false);
  const [isAdminMode, setIsAdminMode] = React.useState(false);
  const [atmStatuses, setAtmStatuses] = React.useState({});
  const [newAtm, setNewAtm] = React.useState({
    id: "",
    name: "",
    bank: "",
    address: "",
    type: "",
    status: "disponivel",
    queue: "curta",
  });
  const [isEditing, setIsEditing] = React.useState(false);
  const [previousScreen, setPreviousScreen] = React.useState(null);
  const [showSupportForm, setShowSupportForm] = React.useState(false);
  const [supportData, setSupportData] = React.useState({
    description: "",
    screenshot: null,
  });
  const [showWelcomeMessage, setShowWelcomeMessage] = React.useState(false);
  const [showSupportMessages, setShowSupportMessages] = React.useState(false);
  const [upload] = useUpload();
  const [supportMessages, setSupportMessages] = React.useState([]);
  const [showSuccessMessage, setShowSuccessMessage] = React.useState(false);
  const [atmComments, setAtmComments] = React.useState({});
  const [selectedCategory, setSelectedCategory] = React.useState(null);

  React.useEffect(() => {
    if (currentScreen === "splash") {
      setTimeout(() => {
        setCurrentScreen("login");
      }, 3000);
    }
    loadAtms();
  }, [currentScreen]);

  React.useEffect(() => {
    if (showSuccessMessage) {
      setTimeout(() => {
        setShowSuccessMessage(false);
        setShowSupportForm(false);
      }, 2000);
    }
  }, [showSuccessMessage]);

  React.useEffect(() => {
    const initialStatuses = {};
    atms.forEach((atm) => {
      initialStatuses[atm.id] = {
        hasBalance: atm.status === "disponivel",
        queueStatus: atm.queue,
      };
    });
    setAtmStatuses(initialStatuses);
  }, [atms]);

  const loadAtms = async () => {
    try {
      const response = await fetch("/api/db/atm", {
        method: "POST",
        body: JSON.stringify({
          query: `
            SELECT a.*, 
            COUNT(DISTINCT c.id) as comment_count,
            MAX(c.has_balance) as latest_balance_status,
            MAX(c.timestamp) as last_comment_time
            FROM atms a
            LEFT JOIN atm_comments c ON a.id = c.atm_id 
            GROUP BY a.id, a.name, a.bank, a.address, a.type, a.status, a.queue, a.last_update
            ORDER BY 
              CASE WHEN a.status = 'disponivel' THEN 0 ELSE 1 END,
              CASE 
                WHEN a.status = 'disponivel' THEN comment_count 
                ELSE comment_count
              END DESC,
              last_comment_time DESC
          `,
        }),
      });
      const atmData = await response.json();
      const commentsResponse = await fetch("/api/db/atm", {
        method: "POST",
        body: JSON.stringify({
          query: "SELECT * FROM atm_comments ORDER BY timestamp DESC",
        }),
      });
      const comments = await commentsResponse.json();
      const atmsWithComments = atmData.map((atm) => ({
        ...atm,
        comments: comments.filter((c) => c.atm_id === atm.id) || [],
      }));

      setAtms(atmsWithComments);
    } catch (error) {
      console.error("Error loading ATMs:", error);
    }
  };

  const handleLogin = () => {
    if (password === "19921dumilde1") {
      setIsAdminMode(true);
      handleScreenChange("main");
    } else {
      setIsAdminMode(false);
      handleScreenChange("main");
    }
    setPassword("");
    setShowWelcomeMessage(true);
  };

  const handleScreenChange = (newScreen) => {
    setPreviousScreen(currentScreen);
    setCurrentScreen(newScreen);
  };
  const handleBack = () => {
    if (previousScreen) {
      setCurrentScreen(previousScreen);
    } else {
      setCurrentScreen("login");
    }
  };
  const filteredAtms = atms
    .filter((atm) => {
      if (selectedCategory === "viana") {
        return atm.address.toLowerCase().includes("viana");
      }
      if (selectedCategory === "belas") {
        return atm.address.toLowerCase().includes("belas");
      }
      if (!searchTerm) return true;
      const searchLower = searchTerm.toLowerCase();
      return Object.values(atm)
        .filter((value) => typeof value === "string")
        .some((value) => value.toLowerCase().includes(searchLower));
    })
    .sort((a, b) => {
      if (a.status === "disponivel" && b.status !== "disponivel") return -1;
      if (a.status !== "disponivel" && b.status === "disponivel") return 1;
      return 0;
    });

  const handleSupportSubmit = async () => {
    try {
      let screenshotUrl = null;

      if (supportData.screenshot) {
        const { url } = await upload({ file: supportData.screenshot });
        screenshotUrl = url;
      }

      await fetch("/api/db/atm", {
        method: "POST",
        body: JSON.stringify({
          query: `
            INSERT INTO support_tickets (
              description, screenshot_url, timestamp
            ) VALUES (?, ?, ?)
          `,
          values: [
            supportData.description,
            screenshotUrl,
            new Date().toISOString(),
          ],
        }),
      });

      setShowSuccessMessage(true);
      setSupportData({
        description: "",
        screenshot: null,
      });
    } catch (error) {
      console.error("Error submitting support:", error);
      alert("Erro ao enviar mensagem de suporte");
    }
  };

  const updateAtmStatus = async (atmId, hasBalance, queueStatus) => {
    try {
      await fetch("/api/db/atm", {
        method: "POST",
        body: JSON.stringify({
          query: `
            UPDATE atms 
            SET status = ?,
                queue = ?,
                last_update = ? 
            WHERE id = ?
          `,
          values: [
            hasBalance ? "disponivel" : "indisponivel",
            queueStatus,
            new Date().toISOString(),
            atmId,
          ],
        }),
      });
      await loadAtms();
    } catch (error) {
      console.error("Error updating ATM status:", error);
    }
  };

  const loadSupportMessages = async () => {
    try {
      const response = await fetch("/api/db/atm", {
        method: "POST",
        body: JSON.stringify({
          query: "SELECT * FROM support_tickets ORDER BY timestamp DESC",
        }),
      });
      const messages = await response.json();
      setSupportMessages(messages);
    } catch (error) {
      console.error("Error loading support messages:", error);
    }
  };

  React.useEffect(() => {
    if (isAdminMode && showSupportMessages) {
      loadSupportMessages();
    }
  }, [isAdminMode, showSupportMessages]);

  const deleteSupportMessage = async (messageId) => {
    try {
      await fetch("/api/db/atm", {
        method: "POST",
        body: JSON.stringify({
          query: "DELETE FROM support_tickets WHERE id = ?",
          values: [messageId],
        }),
      });
      loadSupportMessages();
    } catch (error) {
      console.error("Error deleting support message:", error);
    }
  };

  const addComment = async (atmId, hasBalance, queueStatus) => {
    try {
      const currentTime = new Date().toISOString();

      await updateAtmStatus(atmId, hasBalance, queueStatus);

      if (atmComments[atmId]?.trim()) {
        await fetch("/api/db/atm", {
          method: "POST",
          body: JSON.stringify({
            query: `
              INSERT INTO atm_comments (
                text, user, atm_id, timestamp, has_balance, queue_status
              ) VALUES (?, 'UsuÃ¡rio', ?, ?, ?, ?)
            `,
            values: [
              atmComments[atmId],
              atmId,
              currentTime,
              hasBalance ? 1 : 0,
              queueStatus,
            ],
          }),
        });
      }

      setAtmComments((prev) => ({
        ...prev,
        [atmId]: "",
      }));
      loadAtms();
    } catch (error) {
      console.error("Error adding comment:", error);
    }
  };

  const handleEditAtm = (atm) => {
    setNewAtm({
      id: atm.id,
      name: atm.name,
      bank: atm.bank,
      address: atm.address,
      type: atm.type,
      status: atm.status,
      queue: atm.queue,
    });
    setIsEditing(true);
  };

  const handleNewAtmSubmit = async (e) => {
    e.preventDefault();

    try {
      const currentTime = new Date().toISOString();

      if (isEditing) {
        await fetch("/api/db/atm", {
          method: "POST",
          body: JSON.stringify({
            query: `
              UPDATE atms 
              SET name = ?, bank = ?, address = ?, type = ?, status = ?, queue = ?, last_update = ?
              WHERE id = ?
            `,
            values: [
              newAtm.name,
              newAtm.bank,
              newAtm.address,
              newAtm.type,
              newAtm.status,
              newAtm.queue,
              currentTime,
              newAtm.id,
            ],
          }),
        });
      } else {
        await fetch("/api/db/atm", {
          method: "POST",
          body: JSON.stringify({
            query: `
              INSERT INTO atms (
                name, bank, address, type, status, queue, last_update
              ) VALUES (?, ?, ?, ?, ?, ?, ?)
            `,
            values: [
              newAtm.name,
              newAtm.bank,
              newAtm.address,
              newAtm.type,
              newAtm.status,
              newAtm.queue,
              currentTime,
            ],
          }),
        });
      }

      setNewAtm({
        id: "",
        name: "",
        bank: "",
        address: "",
        type: "",
        status: "disponivel",
        queue: "curta",
      });
      setIsEditing(false);
      loadAtms();
    } catch (error) {
      console.error("Error saving ATM:", error);
    }
  };

  if (currentScreen === "splash") {
    return (
      <div className="min-h-screen overflow-y-auto bg-[#1a237e] flex items-center justify-center">
        <div className="text-center text-white">
          <i className="fas fa-university text-6xl mb-4"></i>
          <h1 className="text-4xl font-bold mb-2">Localiza ATMs</h1>
          <p className="text-xl">Localizador de ATMs em Angola</p>
        </div>
      </div>
    );
  }

  if (currentScreen === "login") {
    return (
      <div className="min-h-screen overflow-y-auto bg-gray-100 flex flex-col items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-lg p-8 w-full max-w-sm">
          <div className="text-center mb-8">
            <i className="fas fa-lock text-5xl text-[#1a237e] mb-4"></i>
            <h2 className="text-2xl font-bold">Localiza ATMs</h2>
            <p className="text-gray-450 mt-2">
              Aplicativo criado por: Dumilde Macai
            </p>
          </div>
          <div className="space-y-4">
            <input
              type="password"
              name="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Clique apenas no botÃ£o em entrar"
              className="w-full p-3 border rounded focus:outline-none focus:ring-2 focus:ring-[#1a237e]"
            />
            <button
              onClick={handleLogin}
              className="w-full bg-[#1a237e] text-white p-3 rounded hover:bg-[#0d1642] transition-colors"
            >
              Entrar
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen overflow-y-auto bg-gray-100">
      {showWelcomeMessage && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-lg relative">
            <button
              onClick={() => setShowWelcomeMessage(false)}
              className="absolute top-2 right-2 text-gray-500 hover:text-gray-700"
            >
              <i className="fas fa-times"></i>
            </button>
            <div className="space-y-4">
              <h2 className="text-2xl font-bold text-[#1a237e]">OlÃ¡!</h2>
              <p>Bem-vindo ao aplicativo Localiza ATMs.</p>
              <p className="font-bold">Regras de UtilizaÃ§Ã£o:</p>
              <div className="flex items-start gap-2">
                <i className="fas fa-sync-alt text-[#1a237e] mt-1"></i>
                <div>
                  <p>
                    Ao acessar o aplicativo, sempre atualize a pÃ¡gina clicando
                    no botÃ£o "Atualizar" localizado no canto superior esquerdo
                    <i className="fas fa-arrow-left ml-2 text-[#1a237e] animate-pulse"></i>
                  </p>
                  <p className="mt-2">
                    Isso garante que todos os dados estejam atualizados em tempo
                    real.
                  </p>
                </div>
              </div>
              <p>A equipa Localiza ATMs agradece a sua cooperaÃ§Ã£o.</p>
              <p className="mt-4">
                Atenciosamente,
                <br />
                Dumilde Macai
                <br />
                Fundador e CEO da Localiza ATMs
              </p>
            </div>
          </div>
        </div>
      )}
      <nav className="bg-[#1a237e] text-white p-4 sticky top-0 z-50">
        <div className="container mx-auto flex flex-col md:flex-row items-center justify-between gap-4">
          <div className="flex items-center justify-between w-full md:w-auto">
            <button
              onClick={(e) => {
                e.preventDefault();
                loadAtms();
              }}
              className="text-white"
            >
              <i className="fas fa-sync-alt text-xl"></i>
            </button>
            <h1 className="text-2xl font-bold text-center md:hidden">
              Localiza ATMs
            </h1>
          </div>
          <h1 className="text-2xl font-bold hidden md:block">Localiza ATMs</h1>
          <div className="flex flex-wrap items-center justify-center md:justify-end gap-2 w-full md:w-auto">
            {isAdminMode && (
              <>
                <button
                  onClick={() => {
                    setShowSupportMessages(true);
                    loadSupportMessages();
                  }}
                  className="px-4 py-2 bg-white text-[#1a237e] rounded hover:bg-gray-100 w-full md:w-auto"
                >
                  Mensagens do Suporte
                </button>
                <button
                  onClick={() => setIsAdminMode(false)}
                  className="px-4 py-2 bg-white text-[#1a237e] rounded hover:bg-gray-100 w-full md:w-auto"
                >
                  PÃ¡gina Principal
                </button>
              </>
            )}
            <button
              onClick={() => setShowSupportForm(true)}
              className="px-4 py-2 bg-white text-[#1a237e] rounded hover:bg-gray-100 w-full md:w-auto"
            >
              Suporte
            </button>
            <button
              onClick={() => handleScreenChange("login")}
              className="px-4 py-2 bg-white text-[#1a237e] rounded hover:bg-gray-100 w-full md:w-auto"
            >
              Sair
            </button>
          </div>
        </div>
      </nav>

      {showSupportMessages && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-4 md:p-6 w-full max-w-4xl max-h-[80vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl md:text-2xl font-bold">
                Mensagens do Suporte
              </h2>
              <button
                onClick={() => setShowSupportMessages(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <i className="fas fa-times text-xl"></i>
              </button>
            </div>
            <div className="space-y-4">
              {supportMessages.map((message) => (
                <div
                  key={message.id}
                  className="border rounded-lg p-4 relative"
                >
                  <button
                    onClick={() => deleteSupportMessage(message.id)}
                    className="absolute top-2 right-2 text-red-500 hover:text-red-700"
                  >
                    <i className="fas fa-trash"></i>
                  </button>
                  <p className="text-gray-700 mb-2">{message.description}</p>
                  {message.screenshot_url && (
                    <img
                      src={message.screenshot_url}
                      alt="Screenshot do problema"
                      className="max-w-full h-auto rounded"
                    />
                  )}
                  <p className="text-sm text-gray-500 mt-2">
                    {new Date(message.timestamp).toLocaleString()}
                  </p>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col items-center mb-8">
          <div className="w-full max-w-2xl">
            <div className="relative mb-4">
              <div className="relative">
                <input
                  type="text"
                  name="search"
                  placeholder="Buscar ATMs, bancos e muito mais..."
                  className="w-full p-4 pl-12 pr-4 border-2 border-[#1a237e] rounded-full shadow-sm focus:outline-none focus:ring-2 focus:ring-[#1a237e] focus:border-transparent text-lg"
                  value={searchTerm}
                  onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setShowSuggestions(true);
                  }}
                  onFocus={() => setShowSuggestions(true)}
                  onBlur={() =>
                    setTimeout(() => setShowSuggestions(false), 200)
                  }
                  autoComplete="off"
                />
                <i className="fas fa-search absolute left-4 top-1/2 -translate-y-1/2 text-[#1a237e] text-xl"></i>
              </div>
              {showSuggestions && searchTerm && (
                <div className="absolute w-full bg-white mt-1 rounded-lg shadow-lg border border-gray-200 z-10 max-h-[300px] overflow-y-auto">
                  {filteredAtms.map((atm) => (
                    <div
                      key={atm.id}
                      className="p-4 hover:bg-gray-50 cursor-pointer border-b last:border-b-0"
                      onClick={() => {
                        setSearchTerm(atm.name);
                        setShowSuggestions(false);
                      }}
                    >
                      <div className="flex items-center gap-3">
                        <i className="fas fa-university text-[#1a237e] text-xl"></i>
                        <div className="flex-1">
                          <div className="font-medium text-lg">{atm.name}</div>
                          <div className="text-gray-500 text-sm mt-1">
                            <i className="fas fa-map-marker-alt mr-2"></i>
                            {atm.address}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
            <div className="overflow-x-auto pb-2 -mx-4 px-4">
              <div className="flex flex-wrap gap-2">
                <button
                  onClick={() => setSelectedCategory(null)}
                  className={`px-4 py-2 rounded-full text-sm md:text-base ${
                    selectedCategory === null
                      ? "bg-[#1a237e] text-white"
                      : "bg-gray-200 text-gray-700"
                  }`}
                >
                  Todos
                </button>
                {["viana", "belas"].map((category) => (
                  <button
                    key={category}
                    onClick={() => setSelectedCategory(category)}
                    className={`px-4 py-2 rounded-full text-sm md:text-base ${
                      selectedCategory === category
                        ? "bg-[#1a237e] text-white"
                        : "bg-gray-200 text-gray-700"
                    }`}
                  >
                    {category.replace("_e_", " e ")}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>

        {showSupportForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg p-4 md:p-6 w-full max-w-md">
              <h2 className="text-xl font-bold mb-4">Suporte</h2>
              <textarea
                className="w-full p-3 border rounded mb-4 min-h-[100px]"
                placeholder="Descreva seu problema..."
                value={supportData.description}
                onChange={(e) =>
                  setSupportData({
                    ...supportData,
                    description: e.target.value,
                  })
                }
              />
              <input
                type="file"
                accept="image/*"
                onChange={(e) =>
                  setSupportData({
                    ...supportData,
                    screenshot: e.target.files?.[0] || null,
                  })
                }
                className="mb-4 w-full"
              />
              <div className="flex flex-col md:flex-row justify-end gap-2 md:gap-4">
                <button
                  onClick={() => setShowSupportForm(false)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800 order-2 md:order-1"
                >
                  Cancelar
                </button>
                <button
                  onClick={handleSupportSubmit}
                  className="px-4 py-2 bg-[#1a237e] text-white rounded hover:bg-[#0d1642] order-1 md:order-2"
                >
                  Enviar
                </button>
              </div>
            </div>
          </div>
        )}

        {showSuccessMessage && (
          <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-green-500 text-white px-4 md:px-8 py-4 rounded-lg z-50 text-center">
            A sua mensagem foi enviada com Sucesso!
          </div>
        )}

        {isAdminMode && (
          <form
            onSubmit={handleNewAtmSubmit}
            className="bg-white rounded-lg shadow-lg p-4 md:p-6 mb-8"
          >
            <h2 className="text-xl font-bold mb-6">
              {isEditing ? "Editar ATM" : "Adicionar Novo ATM"}
            </h2>
            <input type="hidden" name="id" value={newAtm.id} />
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
              <div className="space-y-4">
                <input
                  type="text"
                  name="name"
                  placeholder="Nome do ATM"
                  value={newAtm.name}
                  onChange={(e) =>
                    setNewAtm({ ...newAtm, name: e.target.value })
                  }
                  className="w-full p-3 border rounded focus:outline-none focus:ring-2 focus:ring-[#1a237e]"
                  required
                />
                <input
                  type="text"
                  name="bank"
                  placeholder="Banco"
                  value={newAtm.bank}
                  onChange={(e) =>
                    setNewAtm({ ...newAtm, bank: e.target.value })
                  }
                  className="w-full p-3 border rounded focus:outline-none focus:ring-2 focus:ring-[#1a237e]"
                  required
                />
              </div>
              <div className="space-y-4">
                <input
                  type="text"
                  name="type"
                  placeholder="Tipo de ATM"
                  value={newAtm.type}
                  onChange={(e) =>
                    setNewAtm({ ...newAtm, type: e.target.value })
                  }
                  className="w-full p-3 border rounded focus:outline-none focus:ring-2 focus:ring-[#1a237e]"
                  required
                />
                <select
                  name="status"
                  value={newAtm.status}
                  onChange={(e) =>
                    setNewAtm({ ...newAtm, status: e.target.value })
                  }
                  className="w-full p-3 border rounded focus:outline-none focus:ring-2 focus:ring-[#1a237e]"
                >
                  <option value="disponivel">DisponÃ­vel</option>
                  <option value="indisponivel">IndisponÃ­vel</option>
                </select>
              </div>
              <div className="md:col-span-2">
                <input
                  type="text"
                  name="address"
                  placeholder="EndereÃ§o"
                  value={newAtm.address}
                  onChange={(e) =>
                    setNewAtm({ ...newAtm, address: e.target.value })
                  }
                  className="w-full p-3 border rounded focus:outline-none focus:ring-2 focus:ring-[#1a237e]"
                  required
                />
              </div>
              <div className="md:col-span-2">
                <select
                  name="queue"
                  value={newAtm.queue}
                  onChange={(e) =>
                    setNewAtm({ ...newAtm, queue: e.target.value })
                  }
                  className="w-full p-3 border rounded focus:outline-none focus:ring-2 focus:ring-[#1a237e]"
                >
                  <option value="curta">Curta</option>
                  <option value="media">MÃ©dia</option>
                  <option value="longa">Longa</option>
                </select>
              </div>
            </div>
            <div className="flex flex-col md:flex-row justify-end gap-2 md:gap-4 mt-6">
              {isEditing && (
                <button
                  type="button"
                  onClick={() => {
                    setIsEditing(false);
                    setNewAtm({
                      id: "",
                      name: "",
                      bank: "",
                      address: "",
                      type: "",
                      status: "disponivel",
                      queue: "curta",
                    });
                  }}
                  className="order-2 md:order-1 px-6 py-3 text-gray-600 hover:text-gray-800"
                >
                  Cancelar
                </button>
              )}
              <button
                type="submit"
                className="order-1 md:order-2 bg-[#1a237e] text-white px-6 py-3 rounded hover:bg-[#0d1642]"
              >
                {isEditing ? "Salvar AlteraÃ§Ãµes" : "Adicionar ATM"}
              </button>
            </div>
          </form>
        )}

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
          {filteredAtms.map((atm) => (
            <div
              key={atm.id}
              className={`bg-white rounded-lg shadow-lg p-4 md:p-6 ${
                new Date(atm.last_update) >
                new Date(Date.now() - 24 * 60 * 60 * 1000)
                  ? "ring-2 ring-green-500"
                  : ""
              }`}
            >
              <div className="flex flex-col md:flex-row justify-between items-start mb-4 gap-4">
                <h3 className="text-xl font-bold">{atm.name}</h3>
                <div className="flex items-center gap-2 w-full md:w-auto">
                  {isAdminMode && (
                    <button
                      onClick={() => handleEditAtm(atm)}
                      className="text-blue-600 hover:text-blue-800"
                    >
                      <i className="fas fa-edit"></i>
                    </button>
                  )}
                  <div className="flex flex-col items-end w-full">
                    <span
                      className={`w-full md:w-[175px] h-[60px] md:h-[90px] flex items-center justify-center rounded-lg text-base md:text-lg font-bold shadow-lg transform hover:scale-105 transition-transform ${
                        atm.status === "disponivel"
                          ? "bg-[#4CAF50] text-white"
                          : "bg-[#F44336] text-white"
                      }`}
                    >
                      {atm.status === "disponivel"
                        ? "Com dinheiro"
                        : "Sem dinheiro"}
                    </span>
                    <span className="text-xs text-gray-500 mt-2">
                      Ãltima atualizaÃ§Ã£o:{" "}
                      {new Date(atm.last_update).toLocaleString()}
                    </span>
                  </div>
                </div>
              </div>
              <div className="space-y-2 mb-4">
                <p className="text-gray-600">
                  <i className="fas fa-university mr-2"></i>
                  {atm.bank}
                </p>
                <p className="text-gray-600">
                  <i className="fas fa-map-marker-alt mr-2" />
                  {atm.address}
                </p>
                <div className="flex flex-col md:flex-row items-center justify-between gap-2 mt-6">
                  <button
                    onClick={() => addComment(atm.id, true, atm.queue)}
                    className="w-full px-3 py-1.5 bg-[#90CAF9] text-white rounded text-sm font-medium shadow hover:bg-[#64B5F6] transition-colors"
                  >
                    Com dinheiro
                  </button>
                  <button
                    onClick={() => addComment(atm.id, false, atm.queue)}
                    className="w-full px-3 py-1.5 bg-[#FFB74D] text-white rounded text-sm font-medium shadow hover:bg-[#FFA726] transition-colors"
                  >
                    Sem dinheiro
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
